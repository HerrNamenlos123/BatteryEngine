
#include "Battery/DefaultShaders.h"

namespace Battery {

	// Shaders for drawing antialiased lines


	const std::string BATTERY_SHADER_SOURCE_VERTEX_LINE_ANTIALIASED = "\n"
		"\n"
		"#version 400 core\n"
		"\n"
		"attribute vec4 al_pos;\n"
		"attribute vec4 al_color;\n"
		"\n"
		"uniform mat4 al_projview_matrix;\n"
		"\n"
		"varying vec4 color;\n"
		"varying vec2 screenPos;\n"
		"\n"
		"void main()\n"
		"{\n"
		"	screenPos = al_pos.xy;\n"
		"	color = al_color;\n"
		"	gl_Position = al_projview_matrix * al_pos;\n"
		"}\n"
		"\n";

	const std::string BATTERY_SHADER_SOURCE_FRAGMENT_LINE_ANTIALIASED =
		"\n"
		"#version 400 core\n"
		"\n"
		"out vec4 FragColor;\n"
		"\n"
		"uniform vec2 lineP1;\n"
		"uniform vec2 lineP2;\n"
		"uniform float lineThickness;\n"
		"uniform float lineOutline;\n"
		"\n"
		"varying vec4 color;\n"
		"varying vec2 screenPos;\n"
		"\n"
		"float lineDistance(vec2 P, vec2 L1, vec2 L2) {\n"
		"    float lower = distance(L1, L2);\n"
		"\n"
		"    if (lower != 0)\n"
		"        return abs((L2.x - L1.x) * (L1.y - P.y) - (L1.x - P.x) * (L2.y - L1.y)) / lower;\n"
		"    else\n"
		"        return 0;\n"
		"}\n"
		"\n"
		"float distanceAroundLine(vec2 P, vec2 L1, vec2 L2) {\n"
		"\n"
		"    vec2 aToB = L2 - L1;\n"
		"    vec2 aToP = P - L1;\n"
		"    vec2 bToP = P - L2;\n"
		"\n"
		"    if (aToB.length() == 0)\n"
		"        return aToP.length();\n"
		"\n"
		"    if (dot(aToB, aToP) < 0) {\n"
		"        return distance(P, L1);\n"
		"    }\n"
		"    else if (dot(-aToB, bToP) < 0) {\n"
		"        return distance(P, L2);\n"
		"    }\n"
		"\n"
		"    return lineDistance(P, L1, L2);\n"
		"}\n"
		"\n"
		"void main()\n"
		"{\n"
		"    float dist = distanceAroundLine(screenPos, lineP1, lineP2);\n"
		"\n"
		"    float a = lineThickness * 0.5;\n"
		"    float b = lineOutline * 0.5;\n"
		"\n"
		"    if (a == b && dist > b)\n"
		"        discard;\n"
		"\n"
		"    FragColor = vec4(color.xyz, 1 / (a - b) * dist + b / (b - a));\n"
		"}\n"
		"\n";

}
